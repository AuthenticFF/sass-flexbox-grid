@mixin row() {
  margin: 0 auto;
  width: 100%;
  max-width: $content-well-max-width;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
}

@mixin row-reverse() {
  flex-direction: row-reverse;
}

@mixin col-reverse() {
  flex-direction: column-reverse;
}

@mixin col-factory($thisPrefix) {
  .col-#{$thisPrefix} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }
  @for $i from 1 through $grid-columns {
    .col-#{$thisPrefix}-#{$i} {
      flex-basis: 100% / $grid-columns * $i;
      max-width: 100% / $grid-columns * $i;
    }
    .col-#{$thisPrefix}-offset-#{$i} {
      margin-left: 100% / $grid-columns * $i;
    }
  }
  .start-#{$thisPrefix} {
    justify-content: flex-start;
  }
  .center-#{$thisPrefix} {
    justify-content: center;
  }
  .end-#{$thisPrefix} {
    justify-content: flex-end;
  }
  .top-#{$thisPrefix} {
    align-items: flex-start;
  }
  .middle-#{$thisPrefix} {
    align-items: center;
  }
  .bottom-#{$thisPrefix} {
    align-items: flex-end;
  }
  .around-#{$thisPrefix} {
    justify-content: space-around;
  }
  .between-#{$thisPrefix} {
    justify-content: space-between;
  }
  .first-#{$thisPrefix} {
    order: -1;
  }
  .last-#{$thisPrefix} {
    order: 1;
  }
}

@mixin col-condition($col-number) {
  @if type-of($col-number) != number {
    @warn "Column number must be a number (second arg in the col mixin)";
  } @else if $col-number > $grid-columns {
    @warn "Column number must be less than or equal to total number of columns in grid (#{$grid-columns})";
  } @else if $col-number != 0 {
    flex-basis: 100% / $grid-columns * $col-number;
    max-width: 100% / $grid-columns * $col-number;
  } @else {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }
}

@mixin col($breakpoint: "xs", $col-number: 0) {
  // If no breakpoint is passed and a col number is just use the first arg as the col number and act like xs
  @if type-of($breakpoint) == number {
    $col-number: $breakpoint;
    @include col-condition($col-number);
  } @else if $breakpoint == "xs" {
    @include col-condition($col-number);
  } @else if $breakpoint == "sm" {
    @media #{$breakpoint-sm-up} {
      @include col-condition($col-number);
    }
  } @else if $breakpoint == "md" {
    @media #{$breakpoint-md-up} {
      @include col-condition($col-number);
    }
  } @else if $breakpoint == "lg" {
    @media #{$breakpoint-lg-up} {
      @include col-condition($col-number);
    }
  } @else if $breakpoint == "xl" {
    @media #{$breakpoint-xl-up} {
      @include col-condition($col-number);
    }
  } @else {
    @warn "col mixin requires one of the existing breakpoint prefixes (xs, sm, md, lg, xl)";
  }
}

@mixin col-offset-condition($offset-number) {
  @if type-of($offset-number) != number {
    @warn "Column offset number must be a number (second arg in the col mixin)";
  } @else if $offset-number == 0 {
    @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
  } @else if $offset-number > $grid-columns {
    @warn "Column offset number must be greater than 0 and less than or equal to total number of columns in the grid (#{$grid-columns})";
  } @else {
    margin-left: 100% / $grid-columns * $offset-number;
  }
}

@mixin col-offset($breakpoint: "xs", $offset-number: 0) {
  // If no breakpoint is passed and a col number is just use the first arg as the col number and act like xs
  @if type-of($breakpoint) == number {
    $offset-number: $breakpoint;
    @include col-offset-condition($offset-number);
  } @else if $breakpoint == "xs" {
    @include col-offset-condition($offset-number);
  } @else if $breakpoint == "sm" {
    @media #{$breakpoint-sm-up} {
      @include col-offset-condition($offset-number);
    }
  } @else if $breakpoint == "md" {
    @media #{$breakpoint-md-up} {
      @include col-offset-condition($offset-number);
    }
  } @else if $breakpoint == "lg" {
    @media #{$breakpoint-lg-up} {
      @include col-offset-condition($offset-number);
    }
  } @else if $breakpoint == "xl" {
    @media #{$breakpoint-xl-up} {
      @include col-offset-condition($offset-number);
    }
  } @else {
    @warn "col mixin requires one of the existing breakpoint prefixes (xs, sm, md, lg, xl)";
  }
}
